	app.directive("itemlistDirective", function() {
	    return {
	        restrict: 'E',
	        templateUrl: "productlist-list.html"
	    };
	});
	
	app.directive("itemgridDirective", function() {
	    return {
	        restrict: 'E',
	        templateUrl: "productlist-grid.html"
	    };
	});
	
	app.directive("showitemDirective", function() {
	    return {
	        restrict: 'E',
	        templateUrl: "showItem.html"
	    };
	});
	
	app.directive("itemtabsDirective", function() {
	    return {
	        restrict: 'E',
	        templateUrl: "item-tabs.html"
	    };
	});
	
	app.directive("itemdescriptionDirective", function() {
	    return {
	        restrict: 'E',
	        templateUrl: "item-description.html"
	    };
	});
	
	app.directive("itemreviewsDirective", function() {
	    return {
	        restrict: 'E',
	        templateUrl: "item-reviews.html"
	    };
	});
	
	app.directive("itemspecsDirective", function() {
	    return {
	        restrict:'E',
	        templateUrl: 'item-specs.html'
	    };
	});
	
	app.controller('ShowItemsController', function($scope, $http, $window, MainService, ShowItemsService, CookiesService, $stateParams) {
	
		$scope.glued = true;
		$scope.currentPage = 1;
    	$scope.resultsPerPage = 7;
		$scope.maxSize = 5;
		
		$scope.myItemsList = false;
		  
	    $scope.items = [];
	    $scope.sorts = [
    	        {display: "Date: Descending", option:'DatePublished', order: 'Desc'},
    	        {display: "Date: Ascending", option:'DatePublished', order: 'Asc'},
    	        {display: "Rating: Descending", option:'Rate', order: 'Desc'},
    	        {display: "Rating: Ascending", option:'Rate', order: 'Asc'},
    	        {display: "Daily Price: Descending", option:'DailyPrice', order: 'Desc'},
    	        {display: "Daily Price: Ascending", option:'DailyPrice', order: 'Asc'},
    	        {display: "Weekly Price: Descending", option:'WeeklyPrice', order: 'Desc'},
    	        {display: "Weekly Price: Ascending", option:'WeeklyPrice', order: 'Asc'},
    	        {display: "Monthly Price: Descending", option:'MonthlyPrice', order: 'Desc'},
    	        {display: "Monthly Price: Ascending", option:'MonthlyPrice', order: 'Asc'},
    	        {display: "Value: Descending", option:'Value', order: 'Desc'},
    	        {display: "Value: Ascending", option:'Value', order: 'Asc'},
                {display: "Rent Count: Ascending", option:'RentCount', order: 'Asc'},
                {display: "Rent Count: Descending", option:'RentCount', order: 'Desc'},
                {display: "Distance: Ascending", option:'Distance', order: 'Asc'},
                {display: "Distance: Descending", option:'Distance', order: 'Desc'}
	    ];
        $scope.selectedOrder = $scope.sorts[0];
    	
    	$scope.sortChanged = function() {
    		ShowItemsService.currentPage = $scope.currentPage;
    		
    		this.loadItemsOfUser();
    	}
        	
    	$scope.resultsPerPageChanged = function() {
    		ShowItemsService.currentPage = $scope.currentPage;
    		
    		this.loadItemsOfUser();
    	}
		
		$scope.pageChangedCategory = function() {
			
	    	var pageOfCurrURL = $stateParams.p;
	    	
	    	ShowItemsService.currentPage = $scope.currentPage;
	    	$window.location.href = $window.location.href.replace("p=" + pageOfCurrURL, "p=" + $scope.currentPage.toString());
		};
	
		$scope.totalItemsMyItems = function() {
			return ShowItemsService.totalItemsMyItems;
		};
		
		$scope.pageChangedMyItems = function() {
			
	    	var pageOfCurrURL = $stateParams.p;
	    	
	    	ShowItemsService.currentPage = $scope.currentPage;
	    	$window.location.href = $window.location.href.replace("p=" + pageOfCurrURL, "p=" + $scope.currentPage.toString());
		};
		
	    $scope.initCurrentPage = function(){
	    	$scope.currentPage = $stateParams.p;
	    }
		
		$scope.totalItemsCategory = function() {
			return ShowItemsService.totalItemsCategory;
		};
		
	    $scope.loadItemsOfUser = function() {
	        var ccc = CookiesService.getCookie("ccc");
	        
	        if (!angular.isUndefined($stateParams.customerId)){
	    		$scope.myItemsList = false;
	        	ShowItemsService.loadItemsOfUser(ccc, $scope, $stateParams.customerId, ShowItemsService.currentPage);
	        }
	        else {
	    		$scope.myItemsList = true;
	        	ShowItemsService.loadItemsOfUser(ccc, $scope, null, ShowItemsService.currentPage);
	        }
	    };
	
	    $scope.loadItemsByCategory = function(selectedOrder) {
	        var ccc = CookiesService.getCookie("ccc");
	        if (selectedOrder != null){
		        ShowItemsService.selectedOrder = selectedOrder;
		        ShowItemsService.loadItemsByCategory(ccc, $scope, $stateParams.category, ShowItemsService.currentPage, selectedOrder.option, selectedOrder.order);
	        } else {
	        	ShowItemsService.loadItemsByCategory(ccc, $scope, $stateParams.category, ShowItemsService.currentPage, ShowItemsService.selectedOrder.option,  ShowItemsService.selectedOrder.order);
		    }
	    }
	
	    $scope.loadItemsBySubCategory = function(selectedOrder) {
	        var ccc = CookiesService.getCookie("ccc");
	        if (selectedOrder != null){
		        ShowItemsService.selectedOrder = selectedOrder;
		        ShowItemsService.loadItemsBySubCategory(ccc, $scope, $stateParams.category, $stateParams.sonCategory, ShowItemsService.currentPage, selectedOrder.option, selectedOrder.order);
	        } else {
	        	ShowItemsService.loadItemsBySubCategory(ccc, $scope, $stateParams.category, $stateParams.sonCategory, ShowItemsService.currentPage, ShowItemsService.selectedOrder.option,  ShowItemsService.selectedOrder.order);
	        }
	    }
	
	    $scope.getCurrentCategory = function() {
	        return ShowItemsService.currentCategory;
	    }
	
	    $scope.getCurrentSubCategory = function() {
	        return ShowItemsService.currentSubCategory;
	    }
	
	    $scope.getCurrentPage = function() {
	        return ShowItemsService.currentPage;
	    }
	
	    $scope.setCurrentPage = function(page) {
	        ShowItemsService.currentPage = page;
	    }
	
	    $scope.getActivePage = function() {
	        return ShowItemsService.activePage;
	    }
	
	    $scope.getCurrentView = function() {
	        return ShowItemsService.currentView;
	    }
	
	    $scope.setCurrentView = function(view) {
	        ShowItemsService.currentView = view;
	    }
	
	    $scope.init = function(){
	        ShowItemsService.currentView = 1;
	        ShowItemsService.selectedOrder = {display: "Date: Descending", option:'DatePublished', order: 'Desc'};
	        ShowItemsService.serverError = false;
	    }
	
	    $scope.removeItem = function(itemID) {
	        var ccc = CookiesService.getCookie("ccc");
	        ShowItemsService.removeItem($scope, $http, ccc, itemID);
	    }
	
	    $scope.hasError = function() {
	        return ShowItemsService.serverError;
	    }
	
	    $scope.saveItemToEdit = function(id) {
	        ShowItemsService.saveItemToEdit(id);
	    }
	    
	    $scope.getChunkedItems = function() {
	    	return ShowItemsService.listItems;
	    }
	    
	    $scope.deleteConfirmationPopover = {
		    title: 'Are you sure?',
		    templateUrl: 'deleteConfirmationPopover.html'
	    };
	});
	
	app.service('ShowItemsService', function($http, $window, $route, LocationService, CategoriesService, MainService, UserService, $location, $anchorScroll) {
	
	    var chunk = function(arr, size) {
	        var newArr = [];
	        
	        if (arr != null) {
		        for (var i=0; i<arr.length; i+=size) {
		            newArr.push(arr.slice(i, i+size));
		        }
	        }
	        return newArr;
	    };
	
	    var ShowItemsService = {
	
	        selectedItem : {},
	        currentPage : 1,
	        activePage : 1,
	        currentCategory : "",
	        currentSubCategory : "",
	        resultsPerPage : 9,
	        selectedOrder : {display: "Date: Descending", option:'DatePublished', order: 'Desc'},
	        currentView : 1,
	        serverError : false,
	        itemToEdit : -1,
	        listItems : [],
	        totalItemsMyItems : 1,
	        totalItemsCategory : 1,
	
	        loadItemsOfUser : function(ccc, $scope, userId, pageNum) {
	            ShowItemsService.serverError = false;
	            
	            ShowItemsService.listItems = [];
	            
	            var searchParameters = "";
	            var myItemsInd = false;
	            
	            if (!MainService.isUndefinedOrNull(userId)){
	            	searchParameters = "customer=" + userId;
	            }
	            else {
	            	myItemsInd = true;
	            }
	            
	            var selectedOrder = $scope.selectedOrder;
	            
            	if (selectedOrder.option == 'Distance') {
            		
            		if (searchParameters.length > 0) {
            			searchParameters += "&";
            		}
            		
                	searchParameters += ("maxDistance=" + 100000 + "&units=KM");
            	}
	            
                var data = { "CCC" : ccc, "PageNum" : pageNum, "ResultsPerPage" : $scope.resultsPerPage,
                    "OrderOption" : selectedOrder.option, "OrderOrder" : selectedOrder.order,
                    "searchParameters" : searchParameters, "MyItemsInd" : myItemsInd};
	
	            return $http.post('urent/SearchService/search', data).then(function(result) {
	                $scope.items = result.data[1];
	                ShowItemsService.totalItemsMyItems = result.data[0];
	                ShowItemsService.listItems = chunk($scope.items, 3);
	                $scope.chunkedItems = ShowItemsService.listItems;
	            });              
	        },
	
	        loadItemsByCategory : function(ccc, $scope, category, pageNum, orderOption, orderOrder) {
	            var searchParameters = "category=" + ShowItemsService.findIdByName(category);

            	if (orderOption == 'Distance') {
                	searchParameters += ("&maxDistance=" + 100000 + "&units=KM");
            	}
            	
	            if (!MainService.isUndefinedOrNull(orderOption) && !MainService.isUndefinedOrNull(orderOrder)) {
	                var data = { "CCC" : ccc,
	                    "PageNum" : pageNum, "ResultsPerPage" : ShowItemsService.resultsPerPage,
	                    "OrderOption" : orderOption, "OrderOrder" : orderOrder,
	                    "searchParameters" : searchParameters};
	            } else {
	                  var data = { "CCC" : ccc,
	                    "PageNum" : pageNum, "ResultsPerPage" : ShowItemsService.resultsPerPage,
	                    "OrderOption" : "DatePublished", "OrderOrder" : "Desc",
	                    "searchParameters" : searchParameters};
	            }
	
	            ShowItemsService.currentSubCategory = "";
	            ShowItemsService.loadItems(data, $scope, pageNum, category, null);
	        },
	
	        loadItemsBySubCategory : function(ccc, $scope, category, sonCategory, pageNum, orderOption, orderOrder) {
	            var searchParameters = "category=" + ShowItemsService.findIdByNameSub(category, sonCategory);
	            
            	if (orderOption == 'Distance') {
                	searchParameters += ("&maxDistance=" + 100000 + "&units=KM");
            	}
            	
	            if (!MainService.isUndefinedOrNull(orderOption) && !MainService.isUndefinedOrNull(orderOrder)) {
	                var data = { "CCC" : ccc,
	                    "PageNum" : pageNum, "ResultsPerPage" : ShowItemsService.resultsPerPage,
	                    "OrderOption" : orderOption, "OrderOrder" : orderOrder,
	                    "searchParameters" : searchParameters};
	            } else {
	                var data = { "CCC" : ccc,
	                    "PageNum" : pageNum, "ResultsPerPage" : ShowItemsService.resultsPerPage,
	                    "OrderOption" : "DatePublished", "OrderOrder" : "Desc",
	                    "searchParameters" : searchParameters};
	            }
	
	            ShowItemsService.currentSubCategory = sonCategory;
	            ShowItemsService.loadItems(data, $scope, pageNum, category, sonCategory);
	        },
	
	        loadItems : function(data, $scope, pageNum, category, subCategoryName) {
	        	
	        	ShowItemsService.listItems = [];

	            ShowItemsService.currentCategory = category;
	            return $http.post('urent/SearchService/search', data).then(function(result) {
	                $scope.items = result.data[1];
	                ShowItemsService.totalItemsCategory = result.data[0];
	                ShowItemsService.listItems = chunk($scope.items, 3);
	                $scope.chunkedItems = ShowItemsService.listItems;
	            });
	        },
	
	        getItem : function($scope, ccc, itemId) {
	        	var date = new Date();
	        	var currYear = date.getYear() - 100 + 2000;
	        	var currMonth = (date.getMonth() + 1) % 12;
	        	
	            var data = { "CCC" : ccc, "ItemId" : itemId, "Month" : currMonth, "Year" : currYear,
	            			"SectionNum" : $scope.feedbackSection, "SectionSize" : $scope.sectionSize};
	            return $http.post('urent/ItemService/showItemDetails', data).then(function(result) {
	            	$scope.isOwner = (result.data.ownerId == 0);
	            	ShowItemsService.isOwner = (result.data.ownerId == 0);
	
	                ShowItemsService.selectedItem = result.data;
	                $scope.selectedItem = result.data;
	                
	                if (result.data.lstFeedback.length <= $scope.sectionSize) {
                		$scope.showMore = false;
                	}
	            });
	        },
	
	        findIdByName : function(categoryName) {
	            var categories = CategoriesService.getCategories();
	            for (var i = 0; i < categories.length; i++) {
	                if (categories[i].name == categoryName) {
	                    return categories[i].id;
	                }
	            }
	
	            return -1;
	        },
	
	        findIdByNameSub : function(categoryName, subCategoryName) {
	            var categories = CategoriesService.getCategories();
	            for (var i = 0; i < categories.length; i++) {
	                if (categories[i].name == categoryName) {
	                    for (var j = 0; j < categories[i].subCategories.length; j++) {
	                        if (categories[i].subCategories[j].name == subCategoryName) {
	                            return categories[i].subCategories[j].id;
	                        }
	                    }
	                }
	            }
	
	            return -1;
	        },
	
	        changePageClass : function(pageNum){
	            $("#page" + ShowItemsService.activePage).removeClass("active");
	
	            $("#page" + pageNum).addClass("active");
	
	            ShowItemsService.activePage = pageNum;
	        },
	
	        changeRightArrow : function(size) {
	            if (size <= (ShowItemsService.resultsPerPage * ShowItemsService.activePage)) {
	                $("#rightArrow").addClass("disabled");
	            }
	        },
	
	        removeItem : function($scope, $http, ccc, id) {
	            ShowItemsService.serverError = false;
	            var data = { "CCC" : ccc, "ItemId" : id};
	            return $http.post('urent/ItemService/deleteItem', data).then(function(result) {
	                var res = result.data.Response;
	                if (res == 0) { //OK
	                    ShowItemsService.loadItemsOfUser(ccc, $scope);
	                    $route.reload();
	                } else { //Error
	                    ShowItemsService.serverError = true;
	                }
	            });
	        },
	
	        saveItemToEdit : function(id) {
	            ShowItemsService.itemToEdit = id;
	        }
	    }
	
	    return ShowItemsService;
	});
	
	app.controller('ShowItemController', function($scope, $http, ShowItemsService, CookiesService, RentsService, $stateParams) {
	
	    $scope.selectedItem = {};
	    $scope.itemId = $stateParams.itemId;
	    $scope.tab = 1;
	
	    $scope.myRentsService = RentsService;

        $scope.sectionSize = 7;
        $scope.feedbackSection = 1;
        $scope.showMore = true;
	
	    $scope.getItem = function() {
	        var ccc = CookiesService.getCookie("ccc");
	        ShowItemsService.getItem($scope, ccc, $stateParams.itemId);
	    };
        
        $scope.showMoreFeedback = function() {
            $scope.feedbackSection++;
            
        	RentsService.getItemFeedback($scope, $scope.itemId);
        }
	
	    $scope.getTab = function() {
	        return $scope.tab;
	    }
	
	    $scope.setTab = function(tab) {
	        $scope.tab = tab;
	    }
	});
	
	app.controller('DatePickerController', function ($scope, $http, $modal, CookiesService) {
	
	    $scope.pick = function (size) {
	
	        var modalInstance = $modal.open({
	            templateUrl: 'DatesForRent.html',
	            controller: 'PickerInstanceCtrl',
	            windowClass: 'modal',
	            overflow: 'hidden',
	            size: size,
	            resolve: {
	            }
	        });
	
	        modalInstance.result.then(function () {
	        });
	    };
	});
	
	app.controller('PickerInstanceCtrl', function ($scope, $http, $modalInstance, $filter, $stateParams, MainService, RentsService, CookiesService, ShowItemsService) {
	
	    $scope.minDate = new Date();
	    
	    $scope.format = 'dd-MMMM-yyyy';
	
	    $scope.startRentDT = $scope.minDate;
	    $scope.endRentDT = $scope.minDate;
	
	    $scope.loggedIn = !(CookiesService.getCookie("ccc") == "");
	    
	    $scope.init = function(){
	        if (!MainService.isUndefinedOrNull($stateParams.rentId) ||
	        		!MainService.isUndefinedOrNull($stateParams.filter)){
			    $scope.startRentDT = RentsService.selectedRent.startRent;
			    $scope.endRentDT = RentsService.selectedRent.endRent;
			    
		        this.calcDaysAndPrice();
	        }
	        else{
	            $scope.totalDays = 1;
	            $scope.totalPayment = ShowItemsService.selectedItem.dailyPrice;
	        }
	    }
	
	    $scope.ok = function () {
	        var ccc = CookiesService.getCookie("ccc");
	        
	        if (!MainService.isUndefinedOrNull($stateParams.rentId)){ // Change dates of an existing rent inside 'refer to'
	        	RentsService.changeRentDates(ccc, $stateParams.rentId, $scope.startRentDT, $scope.endRentDT, $modalInstance);
	        }
	        else{
	        	if (!MainService.isUndefinedOrNull($stateParams.itemId)){ // New rent
	        		RentsService.request(ccc, $scope, $stateParams.itemId, $scope.startRentDT, $scope.endRentDT, $modalInstance);
	        	}
	        	else { // Change dates of an existing rent outside 'refer to'
		            RentsService.changeRentDates(ccc, RentsService.selectedRent.rentId, $scope.startRentDT, $scope.endRentDT, $modalInstance);
	        	}

	        }
	
	        $scope.myRentsService = RentsService;
	    }
	
	    $scope.cancel = function () {
	        $modalInstance.dismiss('cancel');
	    }
	
	    $scope.startRentOpen = function($event) {
	        this.genericOpen($event);
	
	        $scope.endRentOpened = false;
	        $scope.startRentOpened = true;
	    }
	
	    $scope.endRentOpen = function($event) {
	        this.genericOpen($event);
	
	        $scope.startRentOpened = false;
	        $scope.endRentOpened = true;
	    }
	
	    $scope.genericOpen = function($event) {
	        $event.preventDefault();
	        $event.stopPropagation();
	    };
	    
	//    date-disabled="disabled(date, mode)" 
	//    $scope.disabled = function(date, mode) {
	//    	for (var i = 0; i < ShowItemsService.selectedItem.lstRents.length; i++){
	//    		if (ShowItemsService.selectedItem.lstRents[i].startDate <= date &&
	//    				ShowItemsService.selectedItem.lstRents[i].endDate >= date){
	//    			return true;
	//    		}
	//    	}
	//    	
	//	    return false;
	//    };
	
	    $scope.startRentChanged = function() {
	        if ($scope.startRentDT > $scope.endRentDT){
	            $scope.endRentDT = $scope.startRentDT;
	        }
	    }
	    
	    $scope.calcDaysAndPrice = function() {
			$scope.totalDays = Math.round(($scope.endRentDT - $scope.startRentDT) / 1000 / 60 / 60 / 24 + 1);
			
			var calcDays = $scope.totalDays;
	
			$scope.totalPayment = 0;
			while (calcDays >= 30){
		        if (!MainService.isUndefinedOrNull($stateParams.rentId) ||
		        		!MainService.isUndefinedOrNull($stateParams.filter)){
		        	$scope.totalPayment = $scope.totalPayment + RentsService.selectedRent.monthlyPrice;
		        }
		        else{
		        	$scope.totalPayment = $scope.totalPayment + ShowItemsService.selectedItem.monthlyPrice;
		        }
				calcDays -= 30;
			}
			
			while (calcDays >= 7){
		        if (!MainService.isUndefinedOrNull($stateParams.rentId) ||
		        		!MainService.isUndefinedOrNull($stateParams.filter)){
					$scope.totalPayment = $scope.totalPayment + RentsService.selectedRent.weeklyPrice;
		        }
		        else{
					$scope.totalPayment = $scope.totalPayment + ShowItemsService.selectedItem.weeklyPrice;
		        }
				calcDays -= 7;
			}
	
	        if (!MainService.isUndefinedOrNull($stateParams.rentId) ||
	        		!MainService.isUndefinedOrNull($stateParams.filter)){
	        	$scope.totalPayment = $scope.totalPayment + (RentsService.selectedRent.dailyPrice) * calcDays;
	        }
	        else{
	        	$scope.totalPayment = $scope.totalPayment + (ShowItemsService.selectedItem.dailyPrice) * calcDays;
	        }
	    } 
	    
	    $scope.dateOptions = {
	        formatYear: 'yy',
	        startingDay: 0
	    };
	});